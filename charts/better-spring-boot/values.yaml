# Default values for spring-boot.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ~
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

spring:
  profiles:
    # Configure your activated profiles here
    # defaults to all profiles listed in config below
    active: ~
  # set externalized configuration properties of your spring boot application
  # provided as a map of profiles, that you can then enable or disable individually
  config: {}
  #  Must contain one of values,configMap
#    k8s:
#      # values can contain values that are injected into your application via configMaps. Can be either
#      # 1. a nested dictionary, that is directly injected. Recommended in values.yaml
#      # 2. a yaml string. Recommended for usage with helm update --set-file spring.config.{profile}.values=path/to/file
#      # config files for values are mounted to /app/config/helm-config
#      values:
#        your.spring.property: value
#      # Link an entry from an independent config map as profile specific config file
#      # config files from config maps are mounted to /app/config/config-map
#      configMap:
#        # name of the config map, required
#        name: "my-config-map"
#        # name of key with configuration values
#        key: "application.yaml"
#        # file type and extension
#        type: "yaml"
#      secret:
#        # name of the secret, required
#        name: "my-secret"
#        # name of key with configuration values
#        key: "application.yaml"
#        # file type and extension
#        type: "yaml"
  environmentVariable:
    JAVA_OPTS: ~
    # provided as map of strings or null
    # note that null omits the variable, but empty string is forwarded and would unset it, if the image set it
    # ENV_VAR_NAME: environment variable value

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Allows to override the spring-boot container with a debug entrypoint
# mainly for convenience to investigate issues manually or usage with tools like mirrord
# if you need more advanced overwrites, use a dedicated values.debug.yaml
# You can easily toggle with
# helm upgrade --reuse-values --set debugDeployment.enabled=true your-release goatfryed/better-spring-boot
debugDeployment:
  enabled: false
  # by default, start container with idle wait process, so you can exec into it and investigate
  # or provide your own entrypoint command
  overrideCommand: ["sh", "-c", 'trap "exit 0" SIGTERM SIGINT; tail -f /dev/null & wait']
  # alternatively, set debugDeployment.overrideCommand to nil and provide debug profiles
  # for allowed types, see spring.profiles.active
  overrideProfiles: ~
  # if you don't boot your applications, healthChecks can't work.
  # But you might also want to disable them running in debug profiles
  healthChecksEnabled: false

# Additional deployment rules
deployment:
  # Settings that add labels to improve when the application pod is recreated and therefore restarted
  # For more advanced use cases, consider adding a self-managed label to podLabels.
  # supported strategies:
  # "values-changed": the spring pod is recreated, if active spring configuration is changed, based on best effort basis
  # this only applies to changes in spring.config.{profiles}.values. Reference changes can't be detected by helm.
  # this is filtered to profiles that are enabled
  # "always": on every helm release, pod recreation is forced
  # others or null to disable
  recreatePodStrategy: "values-changed"
