# Default values for spring-boot.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: user-registry/user-repo
  pullPolicy: Always
  tag: "user-tag"

spring:
  serverPort: 8083
  managementPort: 8090
  profiles:
    active: "banana, funk, inspector"
  config:
    profile1:
      values:
        server:
          port: 8080
    profile3:
      configMap:
        name: user-defined-config-map
        key: my-key
        type: properties
    profile4:
      secret:
        name: user-defined-config-map
        key: app.yml
        type: yaml
    inspector:
      values:
        foo: bar
        bar: foo

imagePullSecrets:
  - name: my-private-registry-secret

nameOverride: "my-app"
fullnameOverride: "my-app-fullname"

serviceAccount:
  create: true
  automount: true
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/my-service-account-role
  name: "my-service-account"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"

podLabels:
  environment: production
  app.kubernetes.io/component: web

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: example-com-tls
      hosts:
        - example.com

resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 250m
    memory: 128Mi

healthChecks:
  defaults:
    initialDelaySeconds: 42
    successThreshold: 7
    timeoutSeconds: 3
  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /ready
    periodSeconds: 10
    timeoutSeconds: 7
    failureThreshold: 3
  startupProbe:
    enabled: false
    httpGet:
      path: /actuator/health/fuck

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 75

volumes:
  - name: app-config-volume
    configMap:
      name: app-config
  - name: app-secret-volume
    secret:
      secretName: app-secret
      optional: false

volumeMounts:
  - name: app-config-volume
    mountPath: "/app/config"
    readOnly: true
  - name: app-secret-volume
    mountPath: "/app/secret"
    readOnly: true

nodeSelector:
  kubernetes.io/os: linux
  node-role.kubernetes.io/app: "true"

tolerations:
  - key: "node-role.kubernetes.io/app"
    operator: "Exists"
    effect: "NoSchedule"

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
                - linux
            - key: node-role.kubernetes.io/app
              operator: In
              values:
                - "true"
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - my-app
        topologyKey: "kubernetes.io/hostname"

deployment:
  recreatePodStrategy: "values-changed"
  initContainers:
    - name: sidecar
      image: alpine:latest
      restartPolicy: Always
      command: ['sh', '-c', 'tail -F /opt/logs.txt']
  extraContainers:
    - name: other-container
      image: alpine:latest
      command: ['sh', '-c', 'tail -F /opt/logs.txt']