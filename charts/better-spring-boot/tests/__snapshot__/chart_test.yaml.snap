works with maximal configuration:
  1: |
    raw: |
      1. Get the application URL by running these commands:
        https://example.com/
  2: |
    apiVersion: v1
    data:
      application-inspector.yaml: |
        bar: foo
        foo: bar
      application-profile1.yaml: |
        server:
          port: 8080
    kind: ConfigMap
    metadata:
      name: my-app-fullname-app-config
  3: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: my-app
        helm.sh/chart: better-spring-boot-0.3.0
      name: my-app-fullname
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/name: my-app
      template:
        metadata:
          annotations:
            prometheus.io/port: "8080"
            prometheus.io/scrape: "true"
          labels:
            app.kubernetes.io/component: web
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: my-app
            environment: production
            helm.sh/chart: better-spring-boot-0.3.0
            release/checksum-app-config: dbec081857f377834069f5f2aafae2fbbb17426ccfa5a4f36966b6047ffa6374
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/os
                        operator: In
                        values:
                          - linux
                      - key: node-role.kubernetes.io/app
                        operator: In
                        values:
                          - "true"
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                          - my-app
                  topologyKey: kubernetes.io/hostname
          containers:
            - env:
                - name: SPRING_PROFILES_ACTIVE
                  value: banana, funk, inspector
              image: user-registry/user-repo:user-tag
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health/liveness
                  port: http-management
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 3
              name: spring-boot
              ports:
                - containerPort: 8083
                  name: http
                  protocol: TCP
                - containerPort: 8090
                  name: http-management
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /ready
                  port: http-management
                initialDelaySeconds: 42
                periodSeconds: 10
                successThreshold: 7
                timeoutSeconds: 7
              resources:
                limits:
                  cpu: 500m
                  memory: 256Mi
                requests:
                  cpu: 250m
                  memory: 128Mi
              securityContext:
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 1000
              volumeMounts:
                - mountPath: /app/config/helm-config
                  name: helm-application-properties
                  readOnly: true
                - mountPath: /app/config/config-map/application-profile3.properties
                  name: user-application-properties-profile3
                  readOnly: true
                  subPath: my-key
                - mountPath: /app/config/config-map/application-profile4.yaml
                  name: user-application-properties-profile4
                  readOnly: true
                  subPath: app.yml
                - mountPath: /app/config
                  name: app-config-volume
                  readOnly: true
                - mountPath: /app/secret
                  name: app-secret-volume
                  readOnly: true
            - command:
                - sh
                - -c
                - tail -F /opt/logs.txt
              image: alpine:latest
              name: other-container
          imagePullSecrets:
            - name: my-private-registry-secret
          initContainers:
            - command:
                - sh
                - -c
                - tail -F /opt/logs.txt
              image: alpine:latest
              name: sidecar
              restartPolicy: Always
          nodeSelector:
            kubernetes.io/os: linux
            node-role.kubernetes.io/app: "true"
          securityContext:
            fsGroup: 2000
          serviceAccountName: my-service-account
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/app
              operator: Exists
          volumes:
            - configMap:
                name: my-app-fullname-app-config
              name: helm-application-properties
            - configMap:
                name: user-defined-config-map
              name: user-application-properties-profile3
            - name: user-application-properties-profile4
              secret:
                secretName: user-defined-config-map
            - configMap:
                name: app-config
              name: app-config-volume
            - name: app-secret-volume
              secret:
                optional: false
                secretName: app-secret
  4: |
    apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: my-app
        helm.sh/chart: better-spring-boot-0.3.0
      name: my-app-fullname
    spec:
      maxReplicas: 10
      metrics:
        - resource:
            name: cpu
            target:
              averageUtilization: 75
              type: Utilization
          type: Resource
      minReplicas: 2
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: my-app-fullname
  5: |
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/ingress.class: nginx
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: my-app
        helm.sh/chart: better-spring-boot-0.3.0
      name: my-app-fullname
    spec:
      ingressClassName: nginx
      rules:
        - host: example.com
          http:
            paths:
              - backend:
                  service:
                    name: my-app-fullname
                    port:
                      number: 8080
                path: /
                pathType: ImplementationSpecific
      tls:
        - hosts:
            - example.com
          secretName: example-com-tls
  6: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: my-app
        helm.sh/chart: better-spring-boot-0.3.0
      name: my-app-fullname
    spec:
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: http
      selector:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/name: my-app
      type: ClusterIP
  7: |
    apiVersion: v1
    automountServiceAccountToken: true
    kind: ServiceAccount
    metadata:
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/my-service-account-role
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: my-app
        helm.sh/chart: better-spring-boot-0.3.0
      name: my-service-account
  8: |
    apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        helm.sh/hook: test
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: my-app
        helm.sh/chart: better-spring-boot-0.3.0
      name: my-app-fullname-test-connection
    spec:
      containers:
        - args:
            - my-app-fullname:8080
          command:
            - wget
          image: busybox
          name: wget
      restartPolicy: Never
works with minimal configuration:
  1: |
    raw: |
      1. Get the application URL by running these commands:
        export POD_NAME=$(kubectl get pods --namespace NAMESPACE -l "app.kubernetes.io/name=spring-boot,app.kubernetes.io/instance=RELEASE-NAME" -o jsonpath="{.items[0].metadata.name}")
        export CONTAINER_PORT=$(kubectl get pod --namespace NAMESPACE $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
        echo "Visit http://127.0.0.1:8080 to use your application"
        kubectl --namespace NAMESPACE port-forward $POD_NAME 8080:$CONTAINER_PORT
  2: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: spring-boot
        helm.sh/chart: better-spring-boot-0.3.0
      name: RELEASE-NAME-spring-boot
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: RELEASE-NAME
          app.kubernetes.io/name: spring-boot
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: spring-boot
            helm.sh/chart: better-spring-boot-0.3.0
        spec:
          containers:
            - image: goatfryed/spring-boot-echo:latest
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 12
                httpGet:
                  path: /actuator/health/liveness
                  port: http-management
                periodSeconds: 5
                successThreshold: 1
              name: spring-boot
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
                - containerPort: 8080
                  name: http-management
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health/readiness
                  port: http-management
                periodSeconds: 5
              resources: {}
              securityContext: {}
              startupProbe:
                failureThreshold: 60
                httpGet:
                  path: /actuator/health/liveness
                  port: http-management
                periodSeconds: 5
                successThreshold: 1
              volumeMounts:
                - mountPath: /app/config/helm-config
                  name: helm-application-properties
                  readOnly: true
          securityContext: {}
          serviceAccountName: RELEASE-NAME-spring-boot
          volumes:
            - configMap:
                name: RELEASE-NAME-spring-boot-app-config
              name: helm-application-properties
  3: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: spring-boot
        helm.sh/chart: better-spring-boot-0.3.0
      name: RELEASE-NAME-spring-boot
    spec:
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: http
      selector:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/name: spring-boot
      type: ClusterIP
  4: |
    apiVersion: v1
    automountServiceAccountToken: true
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: spring-boot
        helm.sh/chart: better-spring-boot-0.3.0
      name: RELEASE-NAME-spring-boot
  5: |
    apiVersion: v1
    kind: Pod
    metadata:
      annotations:
        helm.sh/hook: test
      labels:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: spring-boot
        helm.sh/chart: better-spring-boot-0.3.0
      name: RELEASE-NAME-spring-boot-test-connection
    spec:
      containers:
        - args:
            - RELEASE-NAME-spring-boot:80
          command:
            - wget
          image: busybox
          name: wget
      restartPolicy: Never
